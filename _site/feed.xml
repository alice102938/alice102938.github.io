

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Alice</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-04-28T01:33:50+09:00</updated>
  <author>
    <name>Alice.jH</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Alice.jH </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[스노로즈] #2 회원 조회 API</title>
    <link href="http://localhost:4000/posts/snorose-%ED%9A%8C%EC%9B%90-%EC%A0%95%EB%B3%B4-%EC%88%98%EC%A0%95/" rel="alternate" type="text/html" title="[스노로즈] #2 회원 조회 API" />
    <published>2024-04-22T00:00:00+09:00</published>
  
    <updated>2024-04-22T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/snorose-%ED%9A%8C%EC%9B%90-%EC%A0%95%EB%B3%B4-%EC%88%98%EC%A0%95/</id>
    <content src="http://localhost:4000/posts/snorose-%ED%9A%8C%EC%9B%90-%EC%A0%95%EB%B3%B4-%EC%88%98%EC%A0%95/" />
    <author>
      <name>Alice</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="Snorose" />
    
  

  <summary>개발 계획

  회원에게 보여져야 하는 것 정하기
  UserInfoDto 만들기
  로그인 후 token이 어떻게 되는지 로직 고민
    
      로그인 후 token이 id 꺼내지 않고 그대로 전달되어 회원 정보 조회하는 것인지 or
      token에서 회원 정보 꺼내서 검증 후 회원 정보 조회하는 것인지
      
        
          참고로 얘는 전체 다른 기능에서도 쓰일 듯함.
        
      
    
  
  UserService 수정
  UserController 수정


추후 개발

  MemberUpdateDto 만들기


개발 계획 예시

  존재하는 유저 id, 존재하지 않는 유저id에 대한 통합 테스트 추가
  유저 조회 service 추가
 ...</summary>

  </entry>

  
  <entry>
    <title>API 개발(feat.Post man)</title>
    <link href="http://localhost:4000/posts/API-%EA%B0%9C%EB%B0%9C/" rel="alternate" type="text/html" title="API 개발(feat.Post man)" />
    <published>2024-04-22T00:00:00+09:00</published>
  
    <updated>2024-04-22T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/API-%EA%B0%9C%EB%B0%9C/</id>
    <content src="http://localhost:4000/posts/API-%EA%B0%9C%EB%B0%9C/" />
    <author>
      <name>Alice</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="Spring" />
    
  

  <summary></summary>

  </entry>

  
  <entry>
    <title>[스노로즈] #2 회원 조회 API</title>
    <link href="http://localhost:4000/posts/snoroes-%ED%9A%8C%EC%9B%90-%EC%A1%B0%ED%9A%8C/" rel="alternate" type="text/html" title="[스노로즈] #2 회원 조회 API" />
    <published>2024-04-22T00:00:00+09:00</published>
  
    <updated>2024-04-22T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/snoroes-%ED%9A%8C%EC%9B%90-%EC%A1%B0%ED%9A%8C/</id>
    <content src="http://localhost:4000/posts/snoroes-%ED%9A%8C%EC%9B%90-%EC%A1%B0%ED%9A%8C/" />
    <author>
      <name>Alice</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="Snorose" />
    
  

  <summary>개발 계획

  회원에게 보여져야 하는 것 정하기
  UserInfoDto 만들기
  로그인 후 token이 어떻게 되는지 로직 고민
    
      로그인 후 token이 id 꺼내지 않고 그대로 전달되어 회원 정보 조회하는 것인지 or
      token에서 회원 정보 꺼내서 검증 후 회원 정보 조회하는 것인지
      
        
          참고로 얘는 전체 다른 기능에서도 쓰일 듯함.
        
      
    
  
  UserService 수정
  UserController 수정


추후 개발

  MemberUpdateDto 만들기


개발 계획 예시

  존재하는 유저 id, 존재하지 않는 유저id에 대한 통합 테스트 추가
  유저 조회 service 추가
 ...</summary>

  </entry>

  
  <entry>
    <title>Snorose_Signin</title>
    <link href="http://localhost:4000/posts/github-%EC%BB%A4%EB%B0%8B-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%BB%A8%EB%B2%A4%EC%85%98/" rel="alternate" type="text/html" title="Snorose_Signin" />
    <published>2024-04-21T00:00:00+09:00</published>
  
    <updated>2024-04-21T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/github-%EC%BB%A4%EB%B0%8B-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%BB%A8%EB%B2%A4%EC%85%98/</id>
    <content src="http://localhost:4000/posts/github-%EC%BB%A4%EB%B0%8B-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%BB%A8%EB%B2%A4%EC%85%98/" />
    <author>
      <name>Alice</name>
    </author>

  
    
    <category term="github" />
    
    <category term="convention" />
    
  

  <summary>Github 커밋 메시지 컨벤션


  규칙
  
    대부분의 프로그래밍 언어에는 관용적인 스타일과 같은 잘 정해진 규칙이 있다. 커밋 로그에 대한 팀의 접근 방식도 마찬가지여야 한다.
  
  
    참고로 아래 내용들은 정해진 규칙이 아니므로 반드시 따르지 않아도 좋다. 그러나 대부분의 개발자들이 따르는 컨벤션(관습)이므로 참고한다면 분명 좋은 커밋 메시지를 작성할 수 있을 것이다.
  
  
    커밋 메시지는 아래와 같은 구조로 이루어진다.
  
  set 메소드는 사용 의도를 파악하기 힘들고, 무분별하게 쓸 수 있어서 지양하는 것 같아
userRegisterRequestDto.toEntity()에서 다 처리하도록!
    
      DB 수정
      userService 수정
  ...</summary>

  </entry>

  
  <entry>
    <title>CORS 오류란 무엇인가(feat.Spring security)</title>
    <link href="http://localhost:4000/posts/CORS-%EC%98%A4%EB%A5%98/" rel="alternate" type="text/html" title="CORS 오류란 무엇인가(feat.Spring security)" />
    <published>2024-04-21T00:00:00+09:00</published>
  
    <updated>2024-04-21T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/CORS-%EC%98%A4%EB%A5%98/</id>
    <content src="http://localhost:4000/posts/CORS-%EC%98%A4%EB%A5%98/" />
    <author>
      <name>Alice</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="Spring" />
    
  

  <summary>작성 이유

스프링으로 처음하는 백엔드 프로젝트에서 프론트 하는 친구에게 CORS 에러가 발생했다는 연락을 받았다.

내가 로컬 서버, test 서버에서는 문제가 없었으나, 프론트에서는 문제가 생겼다.

문제 해결을 위해 여러 곳에서 서칭하다가 원인과 해결방법을 찾았고, 이곳에 기록해놓기로 하였다.



CORS란


  Access to XMLHttpRequest at ‘주소A’ from origin ‘주소B’ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.


Cross-Origin Resource Sharing 의 줄임말
교차 출처 리소스 공유를 의...</summary>

  </entry>

</feed>


