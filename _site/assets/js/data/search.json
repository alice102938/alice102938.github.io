[
  
  {
    "title": "[스노로즈] #2 회원 조회 API",
    "url": "/posts/snorose-%ED%9A%8C%EC%9B%90-%EC%A0%95%EB%B3%B4-%EC%88%98%EC%A0%95/",
    "categories": "Project, Snorose",
    "tags": "Project, Snorose, Study, Spring, Spring security, CORS, error",
    "date": "2024-04-22 00:00:00 +0900",
    





    
    "snippet": "개발 계획  회원에게 보여져야 하는 것 정하기  UserInfoDto 만들기  로그인 후 token이 어떻게 되는지 로직 고민          로그인 후 token이 id 꺼내지 않고 그대로 전달되어 회원 정보 조회하는 것인지 or      token에서 회원 정보 꺼내서 검증 후 회원 정보 조회하는 것인지                        참...",
    "content": "개발 계획  회원에게 보여져야 하는 것 정하기  UserInfoDto 만들기  로그인 후 token이 어떻게 되는지 로직 고민          로그인 후 token이 id 꺼내지 않고 그대로 전달되어 회원 정보 조회하는 것인지 or      token에서 회원 정보 꺼내서 검증 후 회원 정보 조회하는 것인지                        참고로 얘는 전체 다른 기능에서도 쓰일 듯함.                      UserService 수정  UserController 수정추후 개발  MemberUpdateDto 만들기개발 계획 예시  존재하는 유저 id, 존재하지 않는 유저id에 대한 통합 테스트 추가  유저 조회 service 추가  유저 조회 컨트롤러와 exception handler 추가  통합테스트 템플릿 작성 (통합테스트 하실때 이거 쓰시면 편할거에요)회원에게 보여져야 하는 것login_id : 수정 불가 user_name : 수정 불가 email : 수정 불가 nickname : 수정 가능(단, 1달에 한 번 정도 제약) user_role_id : : 수정 불가 student_number : 수정 불가 major : 수정 불가 birthday : 상시 수정 가능 user_profile : 상시 수정 가능  password - 회원한테 보여지진 않지만 수정 가능(따로 비번 수정하는 )@AuthenticationPrincipal@Authentication을 통한 인증 유저를 가져오는 방법출처 : @AuthenticationPrincipal을 통한 인증 유저 가져오는 방법"
  },
  
  {
    "title": "API 개발(feat.Post man)",
    "url": "/posts/API-%EA%B0%9C%EB%B0%9C/",
    "categories": "Study, Spring",
    "tags": "",
    "date": "2024-04-22 00:00:00 +0900",
    





    
    "snippet": "",
    "content": ""
  },
  
  {
    "title": "[스노로즈] #2 회원 조회 API",
    "url": "/posts/snoroes-%ED%9A%8C%EC%9B%90-%EC%A1%B0%ED%9A%8C/",
    "categories": "Project, Snorose",
    "tags": "Project, Snorose, Study, Spring, Spring security, CORS, error",
    "date": "2024-04-22 00:00:00 +0900",
    





    
    "snippet": "개발 계획  회원에게 보여져야 하는 것 정하기  UserInfoDto 만들기  로그인 후 token이 어떻게 되는지 로직 고민          로그인 후 token이 id 꺼내지 않고 그대로 전달되어 회원 정보 조회하는 것인지 or      token에서 회원 정보 꺼내서 검증 후 회원 정보 조회하는 것인지                        참...",
    "content": "개발 계획  회원에게 보여져야 하는 것 정하기  UserInfoDto 만들기  로그인 후 token이 어떻게 되는지 로직 고민          로그인 후 token이 id 꺼내지 않고 그대로 전달되어 회원 정보 조회하는 것인지 or      token에서 회원 정보 꺼내서 검증 후 회원 정보 조회하는 것인지                        참고로 얘는 전체 다른 기능에서도 쓰일 듯함.                      UserService 수정  UserController 수정추후 개발  MemberUpdateDto 만들기개발 계획 예시  존재하는 유저 id, 존재하지 않는 유저id에 대한 통합 테스트 추가  유저 조회 service 추가  유저 조회 컨트롤러와 exception handler 추가  통합테스트 템플릿 작성 (통합테스트 하실때 이거 쓰시면 편할거에요)회원에게 보여져야 하는 것login_id : 수정 불가 user_name : 수정 불가 email : 수정 불가 nickname : 수정 가능(단, 1달에 한 번 정도 제약) user_role_id : : 수정 불가 student_number : 수정 불가 major : 수정 불가 birthday : 상시 수정 가능 user_profile : 상시 수정 가능  password - 회원한테 보여지진 않지만 수정 가능(따로 비번 수정하는 )@AuthenticationPrincipal@Authentication을 통한 인증 유저를 가져오는 방법출처 : @AuthenticationPrincipal을 통한 인증 유저 가져오는 방법"
  },
  
  {
    "title": "Snorose_Signin",
    "url": "/posts/github-%EC%BB%A4%EB%B0%8B-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%BB%A8%EB%B2%A4%EC%85%98/",
    "categories": "github, convention",
    "tags": "",
    "date": "2024-04-21 00:00:00 +0900",
    





    
    "snippet": "Github 커밋 메시지 컨벤션  규칙      대부분의 프로그래밍 언어에는 관용적인 스타일과 같은 잘 정해진 규칙이 있다. 커밋 로그에 대한 팀의 접근 방식도 마찬가지여야 한다.        참고로 아래 내용들은 정해진 규칙이 아니므로 반드시 따르지 않아도 좋다. 그러나 대부분의 개발자들이 따르는 컨벤션(관습)이므로 참고한다면 분명 좋은 커밋 메시지...",
    "content": "Github 커밋 메시지 컨벤션  규칙      대부분의 프로그래밍 언어에는 관용적인 스타일과 같은 잘 정해진 규칙이 있다. 커밋 로그에 대한 팀의 접근 방식도 마찬가지여야 한다.        참고로 아래 내용들은 정해진 규칙이 아니므로 반드시 따르지 않아도 좋다. 그러나 대부분의 개발자들이 따르는 컨벤션(관습)이므로 참고한다면 분명 좋은 커밋 메시지를 작성할 수 있을 것이다.        커밋 메시지는 아래와 같은 구조로 이루어진다.    set 메소드는 사용 의도를 파악하기 힘들고, 무분별하게 쓸 수 있어서 지양하는 것 같아userRegisterRequestDto.toEntity()에서 다 처리하도록!          DB 수정      userService 수정                  setter는 되도록이면 사용안하기          toEntity 메서드는 객체를 엔티티로 변환하는 메서드입니다. 두 가지 방법은 비슷하게 동작하지만 약간의 차이가 있습니다.Builder를 사용한 방법:            public User toEntity() {return User.builder().loginId(loginId).password(password).userName(userName).email(email).nickname(nickname).studentNumber(studentNumber).major(major).birthday(birthday).build();}                        이 방법은 Lombok의 @Builder 어노테이션을 사용하여 빌더 패턴을 자동으로 생성합니다. 이 패턴은 객체를 생성할 때 매개변수가 많을 때 유용합니다. 이 코드는 객체를 생성하고 필드를 설정하는 과정을 단순화합니다.            일반적인 Setter를 사용한 방법:            public User toEntity(String encodedPassword) {User user = new User();user.setLoginId(this.loginId);user.setPassword(encodedPassword);user.setUserName(this.userName);user.setEmail(this.email);user.setNickname(this.nickname);user.setStudentNumber(this.studentNumber);user.setMajor(this.major);user.setBirthday(this.birthday);user.setLastLoginAt(null); // 기본값으로 설정user.setUserProfile(null); // 기본값으로 설정return user;}                        주요 차이점:            Builder를 사용한 경우에는 모든 필드에 대해 한 줄로 설정할 수 있습니다.일반적인 Setter를 사용한 경우에는 각 필드를 개별적으로 설정해야 합니다.Builder를 사용한 경우에는 빌더 패턴의 이점을 누릴 수 있습니다. 예를 들어, 선택적인 필드를 쉽게 처리할 수 있습니다.일반적인 Setter를 사용한 경우에는 코드가 더 명시적이며 각 필드가 어떻게 설정되는지 명확히 볼 수 있습니다.어떤 방법을 사용할지는 코드의 가독성과 유지보수성에 따라 다를 수 있습니다. 일반적으로는 Builder 패턴을 사용하는 것이 더 깔끔하고 가독성이 좋습니다.                                주로 columndefault 값으로 db 값 설정하기          -&gt; 엔티티에서 userRole은 FK로 ManyToOne annotation 사용 중이라 columndefault값 설정해도 안되는 것 같음      @ColumnDefault(\"1\")은 해당 열의 기본값을 설정하는데 사용됩니다. 그러나 @ManyToOne 관계에서는 @ColumnDefault를 사용하여 외래 키(FK)의 기본값을 설정하는 것은 의미가 없습니다.외래 키는 다른 테이블의 기본 키를 참조하기 때문에 자체적으로 값을 설정하는 것이 아니라 연결된 엔티티의 인스턴스를 참조합니다. 따라서 @ColumnDefault를 사용하여 외래 키의 기본값을 설정하더라도 이는 영향을 주지 않습니다.      참고자료왜 Entity에 setter를 사용하지 말아야 할까?https://velog.io/@langoustine/setter-%EC%A7%80%EC%96%91-%EC%9D%B4%EC%9C%A0"
  },
  
  {
    "title": "CORS 오류란 무엇인가(feat.Spring security)",
    "url": "/posts/CORS-%EC%98%A4%EB%A5%98/",
    "categories": "Study, Spring",
    "tags": "Study, Spring, Spring security, CORS, error",
    "date": "2024-04-21 00:00:00 +0900",
    





    
    "snippet": "작성 이유스프링으로 처음하는 백엔드 프로젝트에서 프론트 하는 친구에게 CORS 에러가 발생했다는 연락을 받았다.내가 로컬 서버, test 서버에서는 문제가 없었으나, 프론트에서는 문제가 생겼다.문제 해결을 위해 여러 곳에서 서칭하다가 원인과 해결방법을 찾았고, 이곳에 기록해놓기로 하였다.CORS란  Access to XMLHttpRequest at ‘...",
    "content": "작성 이유스프링으로 처음하는 백엔드 프로젝트에서 프론트 하는 친구에게 CORS 에러가 발생했다는 연락을 받았다.내가 로컬 서버, test 서버에서는 문제가 없었으나, 프론트에서는 문제가 생겼다.문제 해결을 위해 여러 곳에서 서칭하다가 원인과 해결방법을 찾았고, 이곳에 기록해놓기로 하였다.CORS란  Access to XMLHttpRequest at ‘주소A’ from origin ‘주소B’ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.Cross-Origin Resource Sharing 의 줄임말교차 출처 리소스 공유를 의미Origin 웹에서 Origin은 간단하게 프로토콜, 주소, 포트번호의 튜플로 구분된다.  Origin = [프로토콜]://[Host의 IP 주소 또는 URL]:[포트번호]즉, 아래의 셋 중 하나라도 다르다면 다른 Origin이다.1.프로토콜(HTTP, HTTPS, FTP, …)2.URL(a.com, b.com, cat.co.kr, …)3.포트번호(80, 433, 8080, …)cf. HTTP는 포트 번호가 80번, HTTPS는 포트 번호가 443번1. 동일 출처 정책(Same-Origin Policy, SOP)대부분의 웹 브라우저는 Same Origin Policy(SOP)라는 보안 정책을 준수하며, 같은 출처만 허용한다는 정책내가 접속한 사이트(Origin)에서 다른 Origin에 요청한 것을 기본적으로 제한해서 어느정도 해커의 공격에 방어하는 것이다.다른 Origin에서 온 자원들을 모두 사용할 수 없게 차단했다면 CDN과 같은 것을 사용하기 어려웠을 것이다. 그래서 &lt;img&gt;, &lt;script&gt;, &lt;link&gt;, &lt;iframe&gt;과 같은 특정 HTML Tag는 다른 Origin으로부터 온 것은 임베딩할 수 있게 허용해준다. (임베딩만 가능하고 데이터를 읽는 건 보안상의 이유로 차단한다.) 하지만 우리는 개발하다보면 다른 Origin으로부터의 자원을 불러오고 싶은 경우가 많다. 그렇기 때문에 CORS(Cross Origin Resource Sharing)이라는 것이 생겼다. 다른 Origin의 데이터를 읽고 싶으면 CORS 표준을 지켜서 내 사이트로부터의 응답에 “다른 Origin이더라도 허용해줘!” 라고 말해주면 된다.2. 교차 출처 리소스 공유( Cross-Origin Resource Sharing, CORS)?SOP가 우리가 더 안전하게 웹을 탐색할 수 있게하지만 의도적으로 다른 리소스랑 상호작용하면서 개발하고 싶은 경우에는 너무 제한적이다. 내가 이해한 바로는 그럴 때 써라고 만든게 CORS이다. SOP를 좀 완화해준 느낌?CORS를 사용해서 하나의 Origin만 읽는게 아니라 내가 명시한 다른 신뢰 가능한 Origin으로부터 받은 리소스를 읽어들이는 법에 관해 알아보자.++ 참고로 CORS Request는 Simple Request일 수도 있고 Preflight Request일 수도 있다.  Preflight Request의 경우  다른 Origin 요청을 보낼 때 미리 내 요청을 받을 수 있는지 확인하기 위해서 사전 요청(Preflight Request)을 보낸다. 그러고 나서 가능하면 나의 실제 요청을 보내고 응답을 받는다.🔽 Simple Request인 경우 예비 요청을 보내지 않고 서버에게 바로 본 요청을 보낸 후, 응답 헤더의 Access-Control-Allow-Origin 값을 확인하여 CORS 정책 위반 여부를 확인   요청이 아래와 같을 때 ✔ 요청의 메소드는 GET, HEAD, POST 중 하나여야 한다.✔ Accept, Accept-Language, Content-Language, Content-Type, DPR, Downlink,     Save-Data, Viewport-Width, Width를 제외한 헤더를 사용하면 안 된다.✔ 만약 Content-Type를 사용하는 경우에는 application/x-www-form-urlencoded,     multipart/form-data, text/plain만 허용된다.  이 경우에는 브라우저가 받은 요청이 어떤 Origin에서 시작됐는지 헤더를 추가한다.  서버는 받은 CORS 요청이 유효한지 아닌지 Access-Control-Allow-Origin 헤더로 응답해준다.🔽 Preflight Request인 경우 일반적으로 사용하는 방식으로, 브라우저는 요청을 한 번에 보내지 않고 예비 요청과 본 요청으로 나누어서 서버로 전송 이때 예비 요청은 OPTIONS 메소드를 사용하여 본 요청을 보내기 전에, 브라우저 스스로 이 요청이 안전한지 확인하는 역할   요청이 아래와 같을 때✔ Simple Request가 아닌 경우CORS 오류 해결방법(in spring)1. Spring MVC에서 설정 방법Spring MVC에서 CORS를 적용하는 방법은 크게 2가지로 컨트롤러에서 @CrossOrigin 어노테이션을 사용해서 설정하는 방법전역적으로 Spring MVC 설정에서 CORS를 설정하는 방법 1) 전역적인 방법WebMvcConfigurer을 implements받아 WebConfig에서 전역적으로 cors를 설정해줌@Configuration@EnableWebMvcpublic class WebConfig implements WebMvcConfigurer {        @Override        public void addCorsMappings(CorsRegistry registry) {            registry.addMapping(\"/**\")                    .allowedOriginPatterns(\"*\")                    .allowedMethods(\"*\")                    .allowedHeaders(\"*\")                    .allowCredentials(true)                    .maxAge(3600);        }}괄호안에 “*” : wildcard로 어떤 것이든 허용1.스프링부트 2.4.0버전부터 allowCredentials가 true일때 allowedOrigins에 (“*”) 값을 추가 할 수 없게됨 -&gt;allowedOrigins를 allowedOriginPatterns로 변경 (WebConfig.class)2.axios사용시 프론트 단에서도 allowCredentials를 true해줘야한다 아직 axios에대해 정확하게 알지는 못하지만 프론트에서 axios를 사용할때 allowCredential을 허용해줘야하는데 백에서뿐만아니라 프론트에서도 허용을 하니 cors에러가 사라졌다.3.1,2번 문제해결후 회원가입은 정상적으로 작동했으나 로그인은 계속 cors문제가 발생하였다. 원인은 로그인 후 request응답 헤더에 Origin, Access-Control-Request-Method,Access-Control-Request-Headers이 빠져있었음 공식문서에 따르면 “springsecurity사용시 security 수준에서 cors설정해줘야한다”라고함 -&gt;spring security 사용시 추가 설정필요 (필터단에서 처리필요)2) Controller에 추가controller마다 @CrossOrigin 어노테이션을 활용해준다. @CrossOrigin 애노테이션을 통해 origins, methods, allowedHeaders, exposedHeaders, allowCredentials, maxAge 모두 설정할 수 있다. 그러나 이는 controller가 늘어날수록 controller마다 설정해야한다는 단점이 있다.2. spring security에서 해결 방법이번에 내가 선택한 방법. 우리가 하는 spring project가 스프링 security를 사용하고 있으므로 세번째 방법을 선택했다. Spring security 사용시, 1번의 방법은 이용 불가.순서1)SecurityConfig에 CORS 설정 추가원래 SecurityConfig에 JWT 설정이 있어서 그 앞에 CORS 설정 추가해줬다.@Beanpublic SecurityFilterChain securityFilterChain(HttpSecurity http, JwtProvider jwtProvider) throws Exception {  http    .csrf(AbstractHttpConfigurer::disable)    // CORS 설정 추가    .cors(cors -&gt; cors.configurationSource(corsConfigurationSource()))    .httpBasic(AbstractHttpConfigurer::disable)    .sessionManagement(sessionManagement -&gt; sessionManagement.sessionCreationPolicy(STATELESS))    .authorizeHttpRequests((authorizeHttpRequests)       // authorization ...    )    .addFilterBefore(new JwtAuthenticationFilter(jwtProvider), UsernamePasswordAuthenticationFilter.class);  return http.build();}순서2)CorsConfigurationSource 추가CorsConfigurationSource 만들어준다.@Beanpublic CorsConfigurationSource corsConfigurationSource() {  CorsConfiguration config = new CorsConfiguration();  // *는 모든 것 허용. 추후 상황에 따라 수정 가능  config.addAllowedOriginPattern(\"*\");  config.addAllowedHeader(\"*\");  config.addAllowedMethod(\"*\"); // \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\", \"OPTIONS\", \"HEAD\", \"TRACE\"  config.setExposedHeaders(Arrays.asList(\"Authorization\", \"Authorization-refresh\"));  config.setAllowCredentials(true);  UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();  source.registerCorsConfiguration(\"/**\", config);  return source;}setAllowCredentials(true); : json 서버 응답을 자바스크립트에서 처리할 수 있게 해줌 addAllowedOriginPattern(“”);\t: allowCredentials 를 true로 설정해주었다면, 보안 정책상 allowedOrigins(““)는 불가능. 그럼에도 모든 요청에 대한 허용을 하고 싶다면 allowedOriginPatterns(“*“)를 이용 setExposedHeaders(Arrays.asList(“Authorization”, “Authorization-refresh”)); : 응답 헤더 추가이때 반드시 Authentication Filter보다 앞에 CorsFilter를 추가해주어야 한다.결론스프링 시큐리티를 사용하지 않은 경우 전역적으로 CORS 설정을 하면 된다.스프링 시큐리티를 사용한 경우에는 새로운 CORS 필터를 빈으로 생성한 후 addFilter()를 통해 등록하거나, CorsConfigurationSource를 구현하는 익명 클래스를 생성하고 .cors() 메서드에 등록하여야 한다.참고자료내가 찾은 CORS Error의 올바른 해결법https://coding-groot.tistory.com/91spring boot cors에러 해결(Spring security,react)https://velog.io/@ojin0104/spring-boot-cors%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0Spring-securityreactaxios요청 후 커스텀 header값 못 읽는 문제해결 방법(JWT)https://lollaziest.tistory.com/230[Trouble Shooting] Spring Security를 사용하여 CORS 에러 해결방법https://dangdangee.tistory.com/entry/Trouble-Shooting-Spring-Security%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-CORS-%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95Spring Security Cors Mapping Errorhttps://gowoonsori.com/blog/error/springsecurity-cors/[Spring Security] CORS 설정 시 응답 헤더 없는 오류https://ksh-coding.tistory.com/73"
  },
  
  {
    "title": "[스노로즈] #1 회원 가입 API",
    "url": "/posts/snorose_login/",
    "categories": "Project, Snorose",
    "tags": "",
    "date": "2024-04-13 00:00:00 +0900",
    





    
    "snippet": "  우선 간단한 회원가입 기능은 실행했음  앞으로 만들어야 하는 기능들          basetime entity랑 합치기 -&gt; X 추후에 필요하면 합치기      아이디, 이메일, 학번 같으면 안됨      비밀번호 암호화      만들어진거랑 연결      비밀번호 두번 확인 기능      잘못 쓰면 아래에 빨간 글씨 나타나게-&gt;프론트...",
    "content": "  우선 간단한 회원가입 기능은 실행했음  앞으로 만들어야 하는 기능들          basetime entity랑 합치기 -&gt; X 추후에 필요하면 합치기      아이디, 이메일, 학번 같으면 안됨      비밀번호 암호화      만들어진거랑 연결      비밀번호 두번 확인 기능      잘못 쓰면 아래에 빨간 글씨 나타나게-&gt;프론트?      스크랩 기능, 내가 쓴글 댓글 어케할건지 -&gt; 유저 엔티티, 스크랩 엔티티만들어야할듯      리팩토링      unique 키 처리 할 것인가? (디비 값들)      예외 처리(숫자만, 특수문자 등)      로그인과 합체        set 메소드는 사용 의도를 파악하기 힘들고, 무분별하게 쓸 수 있어서 지양하는 것 같아userRegisterRequestDto.toEntity()에서 다 처리하도록!          DB 수정      userService 수정                  setter는 되도록이면 사용안하기          toEntity 메서드는 객체를 엔티티로 변환하는 메서드입니다. 두 가지 방법은 비슷하게 동작하지만 약간의 차이가 있습니다.Builder를 사용한 방법:            public User toEntity() {return User.builder().loginId(loginId).password(password).userName(userName).email(email).nickname(nickname).studentNumber(studentNumber).major(major).birthday(birthday).build();}                        이 방법은 Lombok의 @Builder 어노테이션을 사용하여 빌더 패턴을 자동으로 생성합니다. 이 패턴은 객체를 생성할 때 매개변수가 많을 때 유용합니다. 이 코드는 객체를 생성하고 필드를 설정하는 과정을 단순화합니다.            일반적인 Setter를 사용한 방법:            public User toEntity(String encodedPassword) {User user = new User();user.setLoginId(this.loginId);user.setPassword(encodedPassword);user.setUserName(this.userName);user.setEmail(this.email);user.setNickname(this.nickname);user.setStudentNumber(this.studentNumber);user.setMajor(this.major);user.setBirthday(this.birthday);user.setLastLoginAt(null); // 기본값으로 설정user.setUserProfile(null); // 기본값으로 설정return user;}                        주요 차이점:            Builder를 사용한 경우에는 모든 필드에 대해 한 줄로 설정할 수 있습니다.일반적인 Setter를 사용한 경우에는 각 필드를 개별적으로 설정해야 합니다.Builder를 사용한 경우에는 빌더 패턴의 이점을 누릴 수 있습니다. 예를 들어, 선택적인 필드를 쉽게 처리할 수 있습니다.일반적인 Setter를 사용한 경우에는 코드가 더 명시적이며 각 필드가 어떻게 설정되는지 명확히 볼 수 있습니다.어떤 방법을 사용할지는 코드의 가독성과 유지보수성에 따라 다를 수 있습니다. 일반적으로는 Builder 패턴을 사용하는 것이 더 깔끔하고 가독성이 좋습니다.                                주로 columndefault 값으로 db 값 설정하기          -&gt; 엔티티에서 userRole은 FK로 ManyToOne annotation 사용 중이라 columndefault값 설정해도 안되는 것 같음      @ColumnDefault(\"1\")은 해당 열의 기본값을 설정하는데 사용됩니다. 그러나 @ManyToOne 관계에서는 @ColumnDefault를 사용하여 외래 키(FK)의 기본값을 설정하는 것은 의미가 없습니다.외래 키는 다른 테이블의 기본 키를 참조하기 때문에 자체적으로 값을 설정하는 것이 아니라 연결된 엔티티의 인스턴스를 참조합니다. 따라서 @ColumnDefault를 사용하여 외래 키의 기본값을 설정하더라도 이는 영향을 주지 않습니다.      참고자료왜 Entity에 setter를 사용하지 말아야 할까?https://velog.io/@langoustine/setter-%EC%A7%80%EC%96%91-%EC%9D%B4%EC%9C%A0"
  },
  
  {
    "title": "Welcome to Jekyll!",
    "url": "/posts/welcome-to-jekyll/",
    "categories": "jekyll, update",
    "tags": "",
    "date": "2024-04-11 18:15:46 +0900",
    





    
    "snippet": "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run je...",
    "content": "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.Jekyll requires blog post files to be named according to the following format:YEAR-MONTH-DAY-title.MARKUPWhere YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.Jekyll also offers powerful support for code snippets:def print_hi(name)  puts \"Hi, #{name}\"endprint_hi('Tom')#=&gt; prints 'Hi, Tom' to STDOUT.Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk."
  },
  
  {
    "title": "Test",
    "url": "/posts/test/",
    "categories": "Blogging, Tutorial",
    "tags": "",
    "date": "2024-04-11 00:00:00 +0900",
    





    
    "snippet": "테스트입니다.내가 따라하고 싶은 테마https://wlqmffl0102.github.io/posts/Customizing-Blogs/테마 커스텀https://www.irgroup.org/posts/Chirpy-%ED%85%8C%EB%A7%88-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95/블로그를 만...",
    "content": "테스트입니다.내가 따라하고 싶은 테마https://wlqmffl0102.github.io/posts/Customizing-Blogs/테마 커스텀https://www.irgroup.org/posts/Chirpy-%ED%85%8C%EB%A7%88-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95/블로그를 만들기 위한 참고자료(chirpy theme)https://ree31206.tistory.com/entry/github-pages-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-%ED%85%8C%EB%A7%88-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0Chirpyhttps://jjikin.com/posts/Jekyll-Chirpy-%ED%85%8C%EB%A7%88%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-Github-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0(2023-6%EC%9B%94-%EA%B8%B0%EC%A4%80)/https://www.handongbee.com/posts/GitHub-Blog-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/블로그 글 비공개https://hyeonjiwon.github.io/blog/blog2/#site-nav로컬에서 테스트 용도로는 보고 싶고 서버에는 비공개https://twpower.github.io/86-make-jekyll-blog-post-private게시 퍼블리쉬 후 언퍼블리쉬https://lvolz.tistory.com/45글쓰는 방법(여러 예시들)https://fienestar.github.io/blog/2020/05/22/jekyll%EC%97%90%EC%84%9C-%ED%8F%AC%EC%8A%A4%ED%8C%85-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/블로그 변경 내용 실시간 적용 방법https://friendlyvillain.github.io/posts/chirpy-refresh/fontawesome ekyll에 추가하기https://sylhare.github.io/2023/12/05/Font-awesome-jekyll.html글쓸 때특수문자https://4urdev.tistory.com/62serverbundle exec jekyll serve"
  },
  
  {
    "title": "Customize the Favicon",
    "url": "/posts/customize-the-favicon/",
    "categories": "Blogging, Tutorial",
    "tags": "favicon",
    "date": "2019-08-11 01:34:00 +0900",
    





    
    "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons...",
    "content": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files:  browserconfig.xml  site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files:            File(s)      From Online Tool      From Chirpy                  *.PNG      ✓      ✗              *.ICO      ✓      ✗        ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition."
  },
  
  {
    "title": "Getting Started",
    "url": "/posts/getting-started/",
    "categories": "Blogging, Tutorial",
    "tags": "getting started",
    "date": "2019-08-09 21:55:00 +0900",
    





    
    "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of the basic environment. Git also needs to be installed.InstallationCreating a New SiteThere are two ways to cr...",
    "content": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of the basic environment. Git also needs to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme:  Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing.  GitHub Fork - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterSign in to GitHub and browse to Chirpy Starter, click the button Use this template &gt; Create a new repository, and name the new repository USERNAME.github.io, where USERNAME represents your GitHub username.Option 2. GitHub ForkSign in to GitHub to fork Chirpy, and then rename it to USERNAME.github.io (USERNAME means your username).Next, clone your site to local machine. In order to build JavaScript files later, we need to install Node.js, and then run the tool:$ bash tools/init  If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will:  Check out the code to the latest tag (to ensure the stability of your site: as the code for the default branch is under development).  Remove non-essential sample files and take care of GitHub-related files.  Build JavaScript files and export to assets/js/dist/, then make them tracked by Git.  Automatically create a new commit to save the changes above.Installing DependenciesBefore running local server for the first time, go to the root directory of your site and run:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options:  url  avatar  timezone  langSocial Contact OptionsSocial contact options are displayed at the bottom of the sidebar. You can turn on/off the specified contacts in file _data/contact.yml.Customizing StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/jekyll-theme-chirpy.scss to the same path on your Jekyll site, and then add the custom style at the end of it.Starting with version 6.2.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, copy the main sass file _sass/main.scss into the _sass directory in your site’s source, then create a new file _sass/variables-hook.scss and assign new value.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/origin/cors.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sAfter a few seconds, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using GitHub ActionsThere are a few things to get ready for.  If you’re on the GitHub Free plan, keep your site repository public.      If you have committed Gemfile.lock to the repository, and your local machine is not running Linux, go to the root of your site and update the platform list of the lock-file:    $ bundle lock --add-platform x86_64-linux      Next, configure the Pages service.      Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar. Then, in the Source section (under Build and deployment), select GitHub Actions from the dropdown menu.        Push any commits to GitHub to trigger the Actions workflow. In the Actions tab of your repository, you should see the workflow Build and Deploy running. Once the build is complete and successful, the site will be deployed automatically.  At this point, you can go to the URL indicated by GitHub to access your site.Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server."
  },
  
  {
    "title": "Writing a New Post",
    "url": "/posts/write-a-new-post/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2019-08-08 15:10:00 +0900",
    





    
    "snippet": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and P...",
    "content": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---Having said that, the key author can also identify multiple entries.  The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Post DescriptionBy default, the first words of the post are used to display on the home page for a list of posts, in the Further Reading section, and in the XML of the RSS feed. If you don’t want to display the auto-generated description for the post, you can customize it using the description field in the Front Matter as follows:---description: Short summary of the post.---Additionally, the description text will also be displayed under the post title on the post’s page.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---After enabling the mathematical feature, you can add math equations with the following syntax:  Block math should be added with $$ math $$ with mandatory blank lines before and after $$          Inserting equation numbering should be added with $$\\begin{equation} math \\end{equation}$$      Referencing equation numbering should be done with \\label{eq:label_name} in the equation block and \\eqref{eq:label_name} inline with text (see example below)        Inline math (in lines) should be added with $$ math $$ without any blank line before or after $$  Inline math (in lists) should be added with \\$$ math $$&lt;!-- Block math, keep all blank lines --&gt;$$LaTeX_math_expression$$&lt;!-- Equation numbering, keep all blank lines  --&gt;$$\\begin{equation}  LaTeX_math_expression  \\label{eq:label_name}\\end{equation}$$Can be referenced as \\eqref{eq:label_name}.&lt;!-- Inline math in lines, NO blank lines --&gt;\"Lorem ipsum dolor sit amet, $$ LaTeX_math_expression $$ consectetur adipiscing elit.\"&lt;!-- Inline math in lists, escape the first `$` --&gt;1. \\$$ LaTeX_math_expression $$2. \\$$ LaTeX_math_expression $$3. \\$$ LaTeX_math_expression $$MermaidMermaid is a great diagram generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image, then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image.![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }  For an SVG, you have to at least specify its width, otherwise it won’t be rendered.Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      Dark/Light modeYou can make images follow theme preferences in dark/light mode. This requires you to prepare two images, one for dark mode and one for light mode, and then assign them a specific class (dark or light):![Light mode only](/path/to/light-mode.png){: .light }![Dark mode only](/path/to/dark-mode.png){: .dark }ShadowThe screenshots of the program window can be considered to show the shadow effect:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\" /&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\" /&gt;Preview ImageIf you want to add an image at the top of the post, please provide an image with a resolution of 1200 x 630. Please note that if the image aspect ratio does not meet 1.91 : 1, the image will be scaled and cropped.Knowing these prerequisites, you can start setting the image’s attribute:---image:  path: /path/to/image  alt: image alternative text---Note that the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.For simple use, you can also just use image to define the path.---image: /path/to/image---LQIPFor preview images:---image:  lqip: /path/to/lqip-file # or base64 URI---  You can observe LQIP in the preview image of post Text and Typography.For normal images:![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" }Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.VideosVideo Sharing PlatformYou can embed a video with the following syntax:{% include embed/{Platform}.html id='{ID}' %}Where Platform is the lowercase of the platform name, and ID is the video ID.The following table shows how to get the two parameters we need in a given video URL, and you can also know the currently supported video platforms.            Video URL      Platform      ID                  https://www.youtube.com/watch?v=H-B46URT4mg      youtube      H-B46URT4mg              https://www.twitch.tv/videos/1634779211      twitch      1634779211              https://www.bilibili.com/video/BV1Q44y1B7Wf      bilibili      BV1Q44y1B7Wf      Video FileIf you want to embed a video file directly, use the following syntax:{% include embed/video.html src='{URL}' %}Where URL is an URL to a video file e.g. /assets/img/sample/video.mp4.You can also specify additional attributes for the embedded video file. Here is a full list of attributes allowed.  poster='/path/to/poster.png' - poster image for a video that is shown while video is downloading  title='Text' - title for a video that appears below the video and looks same as for images  autoplay=true - video automatically begins to play back as soon as it can  loop=true - automatically seek back to the start upon reaching the end of the video  muted=true - audio will be initially silenced  types - specify the extensions of additional video formats separated by |. Ensure these files exist in the same directory as your primary video file.Consider an example utilizing all of the above:{%  include embed/video.html  src='/path/to/video/video.mp4'  types='ogg|mov'  poster='poster.png'  title='Demo video'  autoplay=true  loop=true  muted=true%}  It’s not recommended to host video files in assets folder as they cannot be cached by PWA and may cause issues.Instead, use CDN to host video files. Alternatively, use a separate folder that is excluded from PWA (see pwa.deny_paths setting in _config.yml).AudiosAudio FileIf you want to embed an audio file directly, use the following syntax:{% include embed/audio.html src='{URL}' %}Where URL is an URL to an audio file e.g. /assets/img/sample/audio.mp3.You can also specify additional attributes for the embedded audio file. Here is a full list of attributes allowed.  title='Text' - title for an audio that appears below the audio and looks same as for images  types - specify the extensions of additional audio formats separated by |. Ensure these files exist in the same directory as your primary audio file.Consider an example utilizing all of the above:{%  include embed/audio.html  src='/path/to/audio/audio.mp3'  types='ogg|wav|aac'  title='Demo audio'%}  It’s not recommended to host audio files in assets folder as they cannot be cached by PWA and may cause issues.Instead, use CDN to host audio files. Alternatively, use a separate folder that is excluded from PWA (see pwa.deny_paths setting in _config.yml).Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Text and Typography",
    "url": "/posts/text-and-typography/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2019-08-08 12:33:00 +0900",
    





    
    "snippet": "HeadingsH1 - headingH2 - headingH3 - headingH4 - headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risu...",
    "content": "HeadingsH1 - headingH2 - headingH3 - headingH4 - headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    ToDo list  Job          Step 1      Step 2      Step 3      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the tip type prompt.  An example showing the info type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blocksCommonThis is a common code snippet, without syntax highlight and line number.Specific Languageif [ $? -ne 0 ]; then  echo \"The command was not successful.\";  #do the needful / exitfi;Specific filename@import  \"colors/light-typography\",  \"colors/dark-typography\";MathematicsThe mathematics powered by MathJax:\\[\\begin{equation}  \\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}  \\label{eq:series}\\end{equation}\\]We can reference the equation as \\eqref{eq:series}.When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dImagesDefault (with caption)Full screen width and center alignmentLeft alignedFloat to leftPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Float to rightPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Dark/Light mode &amp; ShadowThe image below will toggle dark/light mode based on theme preference, notice it has shadows.VideoReverse Footnote            The footnote source &#8617;              The 2nd footnote source &#8617;      "
  }
  
]

